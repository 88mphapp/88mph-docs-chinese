{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # This is the documentation of 88mph , an upfront stable interest lending protocol. You can find the source code of 88mph on GitHub . To learn about how and why 88mph can achieve upfront stable interest, check out How 88mph works .","title":"Introduction"},{"location":"#introduction","text":"This is the documentation of 88mph , an upfront stable interest lending protocol. You can find the source code of 88mph on GitHub . To learn about how and why 88mph can achieve upfront stable interest, check out How 88mph works .","title":"Introduction"},{"location":"howitworks/","text":"How 88mph works # High level overview # What exactly happens when you, say, deposit 100 DAI into 88mph for 1 year? Your 100 DAI is transferred to 88mph. 88mph returns part of the 100 DAI back to your wallet as the \"upfront interest\" (let's say 10 DAI). 88mph takes the remaining 90 DAI and lends it out on a lending protocol with variable interest rate (e.g. Compound), which will generate interest for the 1 year deposit period. Once the 1 year is over, you withdraw 100 DAI from 88mph. At first glance, this may seem extremely problematic. To begin with, how is this different from simply juggling your own money around? Why would it need to be its own protocol? Secondly, if Compound failed to generate 10 DAI of interest from the 90 DAI lent to it in 1 year, you can't guarantee that you can withdraw 100 DAI from 88mph. These objections are resolved by 88mph through pooling the deposits together. Pooling deposits means putting the deposited DAI into a single pool, from which users can withdraw a deposit once its deposit period is over. How would pooling help? Risk balancing : If Compound's interest rate rose after a deposit, the interest generated by the funds lent to Compound could be more than the upfront interest given to the user. This surplus would be able to balance out the deficit caused by deposits where the interest rate has dropped since deposit. This way, risk of insolvency is reduced for the users, and the stability of 88mph's interest rate is supported. Overlapping deposit periods : If an older deposit could not generate enought interest to cover the deficit caused by the upfront interest payment to the depositor, and its deposit period will be over soon, a newer deposit could temporarily solve the issue, since the funds of the newer deposit can cover the deficit when the old depositor withdraws. This alone obviously does not solve the deficit, since it would essentially be a Ponzi scheme, but combined with risk balancing and the volatility in Compound's interest rate it definitely helps with keeping the 88mph pool solvent. Sponsored deposits : The pooled nature of 88mph allows for sponsored deposits, which are like normal deposits except no upfront interest is paid out. Sponsors could make these deposits in exchange for visibility, and will be taking on part of the pool's risks. Sponsored deposits help with both of the points mentioned above. In addition to pooling, 88mph also algorithmically determine the offered upfront interest rate, such that the part of the deposit that is lent to Compound is expected to generate enough interest to cover the upfront interest paid to the user. This will be further discussed in the next section. Technical details # This section will detail how 88mph determines the upfront interest rate offered to the user. Suppose that for a certain deposit, the deposit period is t seconds, the Compound interest rate at the time of deposit is r_0 per second, the deposit amount is D , and the offered upfront interest is \\gamma D . Also suppose that the amount of interest earned from Compound is linear with regards to time (non-compounding interest). Furthermore, let's suppose that we predict the average interest rate offered by Compound during the deposit period is mr_0 , where m \\gt 0 . Then, the condition for the interest earned from Compound to be at least as much as the upfront interest given to the user is: \\gamma D \\le (1 - \\gamma) D m r_0 t which simplifies to: \\gamma \\le \\frac{m r_0 t}{1 + m r_0 t} Suppose we choose \\gamma = \\frac{m r_0 t}{1 + m r_0 t} to be the (non-annualized) upfront interest rate. This means that the amount that's lent to Compound will be just enough to cover the upfront interest. If the average Compound interest rate actually turns out to be greater than m r_0 , then the deposit will provide a surplus; otherwise it will be in deficit. Therefore, m r_0 is the minimum average Compound interest rate during the deposit period such that won't cause a deficit. It should be clear that m acts as a parameter that we can adjust to represent how optimistic/pessimistic we are about the future Compound interest rate, as well as how risky the pool is. If m > 1 , you would be optimistic about future Compound interest rates; if m < 1 , you would be pessimistic; if m = 1 , you would be neutral. At 88mph, we have selected m = \\frac 1 2 , meaning that an individual deposit won't have a deficit as long as the average Compound interest rate during the deposit period will be at least half of the current rate. What about compound interest, which is what Compound offers? Since earning compound interest rather than non-compound interest just means that the pool will earn more interest, it just makes 88mph more secure against the risk of deficit. To summarize, the upfront interest offered by 88mph for a deposit of D DAI for t seconds is upfrontInterest = \\frac{\\frac 1 2 r_0 t}{1 + \\frac 1 2 r_0 t} D","title":"How 88mph works"},{"location":"howitworks/#how-88mph-works","text":"","title":"How 88mph works"},{"location":"howitworks/#high-level-overview","text":"What exactly happens when you, say, deposit 100 DAI into 88mph for 1 year? Your 100 DAI is transferred to 88mph. 88mph returns part of the 100 DAI back to your wallet as the \"upfront interest\" (let's say 10 DAI). 88mph takes the remaining 90 DAI and lends it out on a lending protocol with variable interest rate (e.g. Compound), which will generate interest for the 1 year deposit period. Once the 1 year is over, you withdraw 100 DAI from 88mph. At first glance, this may seem extremely problematic. To begin with, how is this different from simply juggling your own money around? Why would it need to be its own protocol? Secondly, if Compound failed to generate 10 DAI of interest from the 90 DAI lent to it in 1 year, you can't guarantee that you can withdraw 100 DAI from 88mph. These objections are resolved by 88mph through pooling the deposits together. Pooling deposits means putting the deposited DAI into a single pool, from which users can withdraw a deposit once its deposit period is over. How would pooling help? Risk balancing : If Compound's interest rate rose after a deposit, the interest generated by the funds lent to Compound could be more than the upfront interest given to the user. This surplus would be able to balance out the deficit caused by deposits where the interest rate has dropped since deposit. This way, risk of insolvency is reduced for the users, and the stability of 88mph's interest rate is supported. Overlapping deposit periods : If an older deposit could not generate enought interest to cover the deficit caused by the upfront interest payment to the depositor, and its deposit period will be over soon, a newer deposit could temporarily solve the issue, since the funds of the newer deposit can cover the deficit when the old depositor withdraws. This alone obviously does not solve the deficit, since it would essentially be a Ponzi scheme, but combined with risk balancing and the volatility in Compound's interest rate it definitely helps with keeping the 88mph pool solvent. Sponsored deposits : The pooled nature of 88mph allows for sponsored deposits, which are like normal deposits except no upfront interest is paid out. Sponsors could make these deposits in exchange for visibility, and will be taking on part of the pool's risks. Sponsored deposits help with both of the points mentioned above. In addition to pooling, 88mph also algorithmically determine the offered upfront interest rate, such that the part of the deposit that is lent to Compound is expected to generate enough interest to cover the upfront interest paid to the user. This will be further discussed in the next section.","title":"High level overview"},{"location":"howitworks/#technical-details","text":"This section will detail how 88mph determines the upfront interest rate offered to the user. Suppose that for a certain deposit, the deposit period is t seconds, the Compound interest rate at the time of deposit is r_0 per second, the deposit amount is D , and the offered upfront interest is \\gamma D . Also suppose that the amount of interest earned from Compound is linear with regards to time (non-compounding interest). Furthermore, let's suppose that we predict the average interest rate offered by Compound during the deposit period is mr_0 , where m \\gt 0 . Then, the condition for the interest earned from Compound to be at least as much as the upfront interest given to the user is: \\gamma D \\le (1 - \\gamma) D m r_0 t which simplifies to: \\gamma \\le \\frac{m r_0 t}{1 + m r_0 t} Suppose we choose \\gamma = \\frac{m r_0 t}{1 + m r_0 t} to be the (non-annualized) upfront interest rate. This means that the amount that's lent to Compound will be just enough to cover the upfront interest. If the average Compound interest rate actually turns out to be greater than m r_0 , then the deposit will provide a surplus; otherwise it will be in deficit. Therefore, m r_0 is the minimum average Compound interest rate during the deposit period such that won't cause a deficit. It should be clear that m acts as a parameter that we can adjust to represent how optimistic/pessimistic we are about the future Compound interest rate, as well as how risky the pool is. If m > 1 , you would be optimistic about future Compound interest rates; if m < 1 , you would be pessimistic; if m = 1 , you would be neutral. At 88mph, we have selected m = \\frac 1 2 , meaning that an individual deposit won't have a deficit as long as the average Compound interest rate during the deposit period will be at least half of the current rate. What about compound interest, which is what Compound offers? Since earning compound interest rather than non-compound interest just means that the pool will earn more interest, it just makes 88mph more secure against the risk of deficit. To summarize, the upfront interest offered by 88mph for a deposit of D DAI for t seconds is upfrontInterest = \\frac{\\frac 1 2 r_0 t}{1 + \\frac 1 2 r_0 t} D","title":"Technical details"},{"location":"smartcontract/","text":"Smart contract reference # The smart contract source code can be found on GitHub . Mainnet deployments # Aave Pool # DInterest : 0xdf907B483C7e7402555BCb1D8d3878AC3a38F07B FeeModel : 0xf1409a2f1F5f53e46BbAfd334311c80e675a410D AaveMarket : 0x5e53247b147D57fAf9825DAbe6e06AE90Bd70BA9 Compound Pool # DInterest : 0xeBcE73ED303eB97fA8060F276083444B9bBe63c1 FeeModel : 0xf1409a2f1F5f53e46BbAfd334311c80e675a410D CompoundERC20Market : 0xEa7827E66bd41aA0F57557CE3516644dbFb11eaF Compound Pool (Legacy) # DInterest : 0x9b226970cdeAdA0026aEd50D02E4A0dD37C92b6F FeeModel : 0xf1409a2f1F5f53e46BbAfd334311c80e675a410D CompoundERC20Market : 0xe7326dc7D136c6dF7A4056679A82aBd144631043 Architecture overview # 88mph consists of 3 smart contracts: DInterest : The main smart contract that users interact with. Handles depositing, withdrawing, and keeping track of deposits. Emits all of the events used in the subgraph. FeeModel : Determines the fee strategy of 88mph, as well as who receives the fees. MoneyMarket : A wrapper for interacting with money market protocols, and stores all of the user funds. Requires a different one for each money market protocol. As of now we have CompoundERC20Market and AaveMarket written. API reference # DInterest # State changing functions # function deposit(uint256 amount, uint256 maturationTimestamp) external # Creates a single deposit for the caller. amount : The amount of Dai to deposit. The caller should have already approved the contract to spend this much Dai before calling this function. Scaled by 10^{18} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. function withdraw(uint256 depositID) external # Withdraws a single deposit for the caller. depositID : The index of the deposit to be withdrawn in the userDeposits array. function earlyWithdraw(uint256 depositID) external # Withdraws a single deposit for the caller, before the maturation timestamp. The caller needs to approve DAI to DInterest before calling, the amount is equal to userDeposits[depositID].initialDeficit . depositID : The index of the deposit to be withdrawn in the userDeposits array. function multiDeposit(uint256[] calldata amountList, uint256[] calldata maturationTimestampList) external # Deposits multiple deposits for the caller. The values at each index in each array will be combined to create a single deposit. amountList : An array of the amounts of Dai to deposit. The caller should have already approved the contract to spend this much Dai before calling this function. Scaled by 10^{18} . maturationTimestampList : An array of the Unix timestamps at and after which the deposits will be able to be withdrawn. In seconds. function multiWithdraw(uint256[] calldata depositIDList) external # Withdraws multiple deposits for the caller. depositIDList : The indices of the deposits to be withdrawn in the userDeposits array. function multiEarlyWithdraw(uint256[] calldata depositIDList) external # Withdraws multiple deposits for the caller, before the maturation timestamp. The caller needs to approve DAI to DInterest before calling, the amount is equal to the sum of userDeposits[depositID].initialDeficit over all depositIDs in depositIDList . depositIDList : The indices of the deposits to be withdrawn in the userDeposits array. function sponsorDeposit(uint256 amount, uint256 maturationTimestamp, string calldata data) external # Creates a single sponsor deposit for the caller. amount : The amount of Dai to deposit. The caller should have already approved the contract to spend this much Dai before calling this function. Scaled by 10^{18} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. data : An arbitrary string that contains metadata about the sponsor. Will be emitted as part of an event, but won't be put in storage. function sponsorWithdraw(uint256 depositID) external # Withdraws a single sponsor deposit for the caller. depositID : The index of the deposit to be withdrawn in the sponsorDeposits array. Read only functions # function userDeposits(address user, uint256 depositID) external view returns (uint256 amount, uint256 maturationTimestamp, uint256 initialDeficit, bool active) # Returns info about a user deposit. Inputs # user : The address of the user. depositID : The index of the deposit in the userDeposits array. Returns # amount : The amount of the deposit, in stablecoins. Scaled by 10^{stablecoinDecimals} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. initialDeficit : The initial deficit caused by the deposit. Equal to the upfront interest paid plus the fee. active : true if the deposit hasn't been withdrawn, false otherwise. function sponsorDeposits(address user, uint256 depositID) external view returns (uint256 amount, uint256 maturationTimestamp, uint256 initialDeficit, bool active) # Returns info about a sponsor deposit. Inputs # user : The address of the sponsor. depositID : The index of the deposit in the sponsorDeposits array. Returns # amount : The amount of the deposit, in stablecoins. Scaled by 10^{stablecoinDecimals} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. initialDeficit : The initial deficit caused by the deposit. Equal to zero. active : true if the deposit hasn't been withdrawn, false otherwise. function UIRMultiplier() external view returns (uint256) # Returns the multiplier m used here . Scaled by 10^{18} . function MinDepositPeriod() external view returns (uint256) # Returns the minimum deposit period, in seconds. function totalDeposit() external view returns (uint256) # Returns the total deposited amount of stablecoin . Scaled by 10^{stablecoinDecimals} . function moneyMarket() external view returns (address) # Returns the address of MoneyMarket . function stablecoin() external view returns (address) # Returns the address of the stablecoin used. function feeModel() external view returns (address) # Returns the address of FeeModel . function calculateUpfrontInterestRate(uint256 depositPeriodInSeconds) external view returns (uint256 upfrontInterestRate) # Returns the current upfront interest rate \\gamma used here . Inputs # depositPeriodInSeconds : The length of the deposit's deposit period, in seconds. function blocktime() external view returns (uint256) # Returns the average block time 88mph uses in its upfront interest rate calculation, in seconds. Scaled by 10^{18} . function deficit() external view returns (bool isNegative, uint256 deficitAmount) # Returns the deficit of the pool. Returns # isNegative : Whether the deficit is negative. A negative deficit means there's a surplus. deficitAmount : Amount of the pool's deficit, in stablecoins. Scaled by 10^{stablecoinDecimals} . FeeModel # Read only functions # function getFee(uint256 _txAmount) external pure returns (uint256 _feeAmount) # Used for determining how much fee to charge from a transaction. Inputs # _txAmount : The amount of the transaction from which a fee will be taken. Returns # _feeAmount : The amount of the fee that will be taken from the transaction. function beneficiary() external view returns (address) # Returns the address who will receive the fees. MoneyMarket # State changing functions # function deposit(uint256 amount) external # Lends amount stablecoins to the underlying money market protocol. Inputs # amount : The amount of stablecoins to be deposited. function withdraw(uint256 amountInUnderlying) external # Withdraws amountInUnderlying stablecoins from the underlying money market protocol. Inputs # amountInUnderlying : The amount of stablecoins to be withdrawn. Read only functions # function supplyRatePerSecond(uint256 blocktime) external view returns (uint256) # Returns the current interest rate offered by the money market, per second. Scaled by 10^{18} . Inputs # blocktime : The average block time, in seconds. Scaled by 10^{18} . function totalValue() external view returns (uint256) # Returns the total value locked in the money market, in terms of the underlying stablecoin. Scaled by 10^{stablecoinDecimals} .","title":"Smart contract reference"},{"location":"smartcontract/#smart-contract-reference","text":"The smart contract source code can be found on GitHub .","title":"Smart contract reference"},{"location":"smartcontract/#mainnet-deployments","text":"","title":"Mainnet deployments"},{"location":"smartcontract/#aave-pool","text":"DInterest : 0xdf907B483C7e7402555BCb1D8d3878AC3a38F07B FeeModel : 0xf1409a2f1F5f53e46BbAfd334311c80e675a410D AaveMarket : 0x5e53247b147D57fAf9825DAbe6e06AE90Bd70BA9","title":"Aave Pool"},{"location":"smartcontract/#compound-pool","text":"DInterest : 0xeBcE73ED303eB97fA8060F276083444B9bBe63c1 FeeModel : 0xf1409a2f1F5f53e46BbAfd334311c80e675a410D CompoundERC20Market : 0xEa7827E66bd41aA0F57557CE3516644dbFb11eaF","title":"Compound Pool"},{"location":"smartcontract/#compound-pool-legacy","text":"DInterest : 0x9b226970cdeAdA0026aEd50D02E4A0dD37C92b6F FeeModel : 0xf1409a2f1F5f53e46BbAfd334311c80e675a410D CompoundERC20Market : 0xe7326dc7D136c6dF7A4056679A82aBd144631043","title":"Compound Pool (Legacy)"},{"location":"smartcontract/#architecture-overview","text":"88mph consists of 3 smart contracts: DInterest : The main smart contract that users interact with. Handles depositing, withdrawing, and keeping track of deposits. Emits all of the events used in the subgraph. FeeModel : Determines the fee strategy of 88mph, as well as who receives the fees. MoneyMarket : A wrapper for interacting with money market protocols, and stores all of the user funds. Requires a different one for each money market protocol. As of now we have CompoundERC20Market and AaveMarket written.","title":"Architecture overview"},{"location":"smartcontract/#api-reference","text":"","title":"API reference"},{"location":"smartcontract/#dinterest","text":"","title":"DInterest"},{"location":"smartcontract/#state-changing-functions","text":"","title":"State changing functions"},{"location":"smartcontract/#function-deposituint256-amount-uint256-maturationtimestamp-external","text":"Creates a single deposit for the caller. amount : The amount of Dai to deposit. The caller should have already approved the contract to spend this much Dai before calling this function. Scaled by 10^{18} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds.","title":"function deposit(uint256 amount, uint256 maturationTimestamp) external"},{"location":"smartcontract/#function-withdrawuint256-depositid-external","text":"Withdraws a single deposit for the caller. depositID : The index of the deposit to be withdrawn in the userDeposits array.","title":"function withdraw(uint256 depositID) external"},{"location":"smartcontract/#function-earlywithdrawuint256-depositid-external","text":"Withdraws a single deposit for the caller, before the maturation timestamp. The caller needs to approve DAI to DInterest before calling, the amount is equal to userDeposits[depositID].initialDeficit . depositID : The index of the deposit to be withdrawn in the userDeposits array.","title":"function earlyWithdraw(uint256 depositID) external"},{"location":"smartcontract/#function-multideposituint256-calldata-amountlist-uint256-calldata-maturationtimestamplist-external","text":"Deposits multiple deposits for the caller. The values at each index in each array will be combined to create a single deposit. amountList : An array of the amounts of Dai to deposit. The caller should have already approved the contract to spend this much Dai before calling this function. Scaled by 10^{18} . maturationTimestampList : An array of the Unix timestamps at and after which the deposits will be able to be withdrawn. In seconds.","title":"function multiDeposit(uint256[] calldata amountList, uint256[] calldata maturationTimestampList) external"},{"location":"smartcontract/#function-multiwithdrawuint256-calldata-depositidlist-external","text":"Withdraws multiple deposits for the caller. depositIDList : The indices of the deposits to be withdrawn in the userDeposits array.","title":"function multiWithdraw(uint256[] calldata depositIDList) external"},{"location":"smartcontract/#function-multiearlywithdrawuint256-calldata-depositidlist-external","text":"Withdraws multiple deposits for the caller, before the maturation timestamp. The caller needs to approve DAI to DInterest before calling, the amount is equal to the sum of userDeposits[depositID].initialDeficit over all depositIDs in depositIDList . depositIDList : The indices of the deposits to be withdrawn in the userDeposits array.","title":"function multiEarlyWithdraw(uint256[] calldata depositIDList) external"},{"location":"smartcontract/#function-sponsordeposituint256-amount-uint256-maturationtimestamp-string-calldata-data-external","text":"Creates a single sponsor deposit for the caller. amount : The amount of Dai to deposit. The caller should have already approved the contract to spend this much Dai before calling this function. Scaled by 10^{18} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. data : An arbitrary string that contains metadata about the sponsor. Will be emitted as part of an event, but won't be put in storage.","title":"function sponsorDeposit(uint256 amount, uint256 maturationTimestamp, string calldata data) external"},{"location":"smartcontract/#function-sponsorwithdrawuint256-depositid-external","text":"Withdraws a single sponsor deposit for the caller. depositID : The index of the deposit to be withdrawn in the sponsorDeposits array.","title":"function sponsorWithdraw(uint256 depositID) external"},{"location":"smartcontract/#read-only-functions","text":"","title":"Read only functions"},{"location":"smartcontract/#function-userdepositsaddress-user-uint256-depositid-external-view-returns-uint256-amount-uint256-maturationtimestamp-uint256-initialdeficit-bool-active","text":"Returns info about a user deposit.","title":"function userDeposits(address user, uint256 depositID) external view returns (uint256 amount, uint256 maturationTimestamp, uint256 initialDeficit, bool active)"},{"location":"smartcontract/#inputs","text":"user : The address of the user. depositID : The index of the deposit in the userDeposits array.","title":"Inputs"},{"location":"smartcontract/#returns","text":"amount : The amount of the deposit, in stablecoins. Scaled by 10^{stablecoinDecimals} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. initialDeficit : The initial deficit caused by the deposit. Equal to the upfront interest paid plus the fee. active : true if the deposit hasn't been withdrawn, false otherwise.","title":"Returns"},{"location":"smartcontract/#function-sponsordepositsaddress-user-uint256-depositid-external-view-returns-uint256-amount-uint256-maturationtimestamp-uint256-initialdeficit-bool-active","text":"Returns info about a sponsor deposit.","title":"function sponsorDeposits(address user, uint256 depositID) external view returns (uint256 amount, uint256 maturationTimestamp, uint256 initialDeficit, bool active)"},{"location":"smartcontract/#inputs_1","text":"user : The address of the sponsor. depositID : The index of the deposit in the sponsorDeposits array.","title":"Inputs"},{"location":"smartcontract/#returns_1","text":"amount : The amount of the deposit, in stablecoins. Scaled by 10^{stablecoinDecimals} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. initialDeficit : The initial deficit caused by the deposit. Equal to zero. active : true if the deposit hasn't been withdrawn, false otherwise.","title":"Returns"},{"location":"smartcontract/#function-uirmultiplier-external-view-returns-uint256","text":"Returns the multiplier m used here . Scaled by 10^{18} .","title":"function UIRMultiplier() external view returns (uint256)"},{"location":"smartcontract/#function-mindepositperiod-external-view-returns-uint256","text":"Returns the minimum deposit period, in seconds.","title":"function MinDepositPeriod() external view returns (uint256)"},{"location":"smartcontract/#function-totaldeposit-external-view-returns-uint256","text":"Returns the total deposited amount of stablecoin . Scaled by 10^{stablecoinDecimals} .","title":"function totalDeposit() external view returns (uint256)"},{"location":"smartcontract/#function-moneymarket-external-view-returns-address","text":"Returns the address of MoneyMarket .","title":"function moneyMarket() external view returns (address)"},{"location":"smartcontract/#function-stablecoin-external-view-returns-address","text":"Returns the address of the stablecoin used.","title":"function stablecoin() external view returns (address)"},{"location":"smartcontract/#function-feemodel-external-view-returns-address","text":"Returns the address of FeeModel .","title":"function feeModel() external view returns (address)"},{"location":"smartcontract/#function-calculateupfrontinterestrateuint256-depositperiodinseconds-external-view-returns-uint256-upfrontinterestrate","text":"Returns the current upfront interest rate \\gamma used here .","title":"function calculateUpfrontInterestRate(uint256 depositPeriodInSeconds) external view returns (uint256 upfrontInterestRate)"},{"location":"smartcontract/#inputs_2","text":"depositPeriodInSeconds : The length of the deposit's deposit period, in seconds.","title":"Inputs"},{"location":"smartcontract/#function-blocktime-external-view-returns-uint256","text":"Returns the average block time 88mph uses in its upfront interest rate calculation, in seconds. Scaled by 10^{18} .","title":"function blocktime() external view returns (uint256)"},{"location":"smartcontract/#function-deficit-external-view-returns-bool-isnegative-uint256-deficitamount","text":"Returns the deficit of the pool.","title":"function deficit() external view returns (bool isNegative, uint256 deficitAmount)"},{"location":"smartcontract/#returns_2","text":"isNegative : Whether the deficit is negative. A negative deficit means there's a surplus. deficitAmount : Amount of the pool's deficit, in stablecoins. Scaled by 10^{stablecoinDecimals} .","title":"Returns"},{"location":"smartcontract/#feemodel","text":"","title":"FeeModel"},{"location":"smartcontract/#read-only-functions_1","text":"","title":"Read only functions"},{"location":"smartcontract/#function-getfeeuint256-_txamount-external-pure-returns-uint256-_feeamount","text":"Used for determining how much fee to charge from a transaction.","title":"function getFee(uint256 _txAmount) external pure returns (uint256 _feeAmount)"},{"location":"smartcontract/#inputs_3","text":"_txAmount : The amount of the transaction from which a fee will be taken.","title":"Inputs"},{"location":"smartcontract/#returns_3","text":"_feeAmount : The amount of the fee that will be taken from the transaction.","title":"Returns"},{"location":"smartcontract/#function-beneficiary-external-view-returns-address","text":"Returns the address who will receive the fees.","title":"function beneficiary() external view returns (address)"},{"location":"smartcontract/#moneymarket","text":"","title":"MoneyMarket"},{"location":"smartcontract/#state-changing-functions_1","text":"","title":"State changing functions"},{"location":"smartcontract/#function-deposituint256-amount-external","text":"Lends amount stablecoins to the underlying money market protocol.","title":"function deposit(uint256 amount) external"},{"location":"smartcontract/#inputs_4","text":"amount : The amount of stablecoins to be deposited.","title":"Inputs"},{"location":"smartcontract/#function-withdrawuint256-amountinunderlying-external","text":"Withdraws amountInUnderlying stablecoins from the underlying money market protocol.","title":"function withdraw(uint256 amountInUnderlying) external"},{"location":"smartcontract/#inputs_5","text":"amountInUnderlying : The amount of stablecoins to be withdrawn.","title":"Inputs"},{"location":"smartcontract/#read-only-functions_2","text":"","title":"Read only functions"},{"location":"smartcontract/#function-supplyrateperseconduint256-blocktime-external-view-returns-uint256","text":"Returns the current interest rate offered by the money market, per second. Scaled by 10^{18} .","title":"function supplyRatePerSecond(uint256 blocktime) external view returns (uint256)"},{"location":"smartcontract/#inputs_6","text":"blocktime : The average block time, in seconds. Scaled by 10^{18} .","title":"Inputs"},{"location":"smartcontract/#function-totalvalue-external-view-returns-uint256","text":"Returns the total value locked in the money market, in terms of the underlying stablecoin. Scaled by 10^{stablecoinDecimals} .","title":"function totalValue() external view returns (uint256)"}]}