{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # This is the documentation of 88mph , an fixed-rate yield-generation protocol. You can find the source code of 88mph on GitHub . To learn about how and how 88mph achieves fixed-rate interest, check out How 88mph works .","title":"Introduction"},{"location":"#introduction","text":"This is the documentation of 88mph , an fixed-rate yield-generation protocol. You can find the source code of 88mph on GitHub . To learn about how and how 88mph achieves fixed-rate interest, check out How 88mph works .","title":"Introduction"},{"location":"addresses/","text":"Smart contract addresses # MPH token & staking # MPHToken deployed at 0x75A1169E51A3C6336Ef854f76cDE949F999720B1 MPHMinter deployed at 0x2165b3800B17224De39303c240a41064179Db0A6 Rewards2 deployed at 0xbf724db570B9Cf3a8deD903055BcaA863CE07ad7 Dumper2 deployed at 0xEB5b9703502bBb0b3Ce8fdb0F9dCf6f2284508C0 MPH-ETH LP token: 0xfd9aACca3c5F8EF3AAa787E5Cb8AF0c041D8875f ClonedRewardsFactory: 0x4b52448393b8EcF8D56186887976c794056C6C68 LP rewards pool: 0x45DB53CA4D62BDAcA3805A9F648F56cD9dE5127B Shared # LinearInterestModel deployed at 0x53d8d305D1BB3098A46ac97C84B210004c54F5f8 PercentageFeeModel deployed at 0x87D700b0e5aAAde6079FaEf1F6564405E7C0E612 Timelock: 0x4027d912A19E3Cd540FB580aF6A9088eAC738566 Governance treasury: 0x56f34826Cc63151f74FA8f701E4f73C5EAae52AD Developer wallet: 0xfecBad5D60725EB6fd10f8936e02fa203fd27E4b aUSDC # AaveMarket deployed at 0xAdd30675DF3728b47Ce9E23dB5648845E3aEE94E EMAOracle deployed at 0xf84AE5eE13FaAcd43117bA49Dd4879641E5f2c11 88mph aUSDC Pool Deposit deployed at 0x8d6E0CfBDce3de21cd8B5bFC685981475738B198 88mph aUSDC Pool Funding deployed at 0xcE69Bd6de5aD3501bCF70DBE307dBA9E0B5BD139 88mph aUSDC Pool deployed at 0xb5EE8910A93F8A450E97BE0436F36B9458106682 cUNI # CompoundERC20Market deployed at 0x4341C33A96A47defA1ACd7b664A65cF07428Dc05 EMAOracle deployed at 0x380d57370654e0479476B492e8688AAd767e7424 88mph cUNI Pool Deposit deployed at 0xF9E38ff84dd89D9f448ED875A2F0B5ba9dE13053 88mph cUNI Pool Funding deployed at 0xfA28c647c1dC0e1399e158e8Fec035Ec4D7a8Cfa 88mph cUNI Pool deployed at 0xF9761c1A244C66E40cF9B7EfB4b0C29b562B6bC0 cUSDC # CompoundERC20Market deployed at 0x816BE73fD1c6b07F7fFd191C833A354cbd3C24a1 EMAOracle deployed at 0x0018f8aa6c919E12BdD0dC13Bf593d336F44F79C 88mph cUSDC Pool Deposit deployed at 0x20fe575F8c91eEd3AeD6B8ddb04416525792785D 88mph cUSDC Pool Funding deployed at 0x344E6ac24B9DceBCA597d2A1E5e2b3d5a1773Eaf 88mph cUSDC Pool deployed at 0xEB2F0A3045db12366A9f6A8e922D725D86a117EB yUSD # YVaultMarket deployed at 0x4a245808D621dBe39ac4e2286F2B2cd8EAD30B2a EMAOracle deployed at 0xc172061CcF700A4C13d5217dc4c49aEe5A4cFEda 88mph yCRV Pool Deposit deployed at 0x86DAf7Db5fD66db2767A0da2FF5EAAB16d18E74c 88mph yCRV Pool Funding deployed at 0x58c22cA208E2066Fa55fBe79B6B9a55DB0a4FE85 88mph yCRV Pool deployed at 0x25a5feB5aC6533fE3C4E8E8e2a55f9E1f1F8E5f0 ycrvSBTC # YVaultMarket deployed at 0xb75F43fc5769d9a29621dd5d8bE3669aA4F94e3C EMAOracle deployed at 0x9Ab9aef149295747EBf4aDC4444a54ad16Bf9F50 88mph crvSBTC Pool Deposit deployed at 0x35D2B5eccd58484ac2feB62c90E0C9B2144feB34 88mph crvSBTC Pool Funding deployed at 0x454AeBCA7d4455a428511c3f7B4008CD3B529f49 88mph crvSBTC Pool deployed at 0xD42F7c7463B261fAc72510C638A877690beA8d68","title":"Smart contract addresses"},{"location":"addresses/#smart-contract-addresses","text":"","title":"Smart contract addresses"},{"location":"addresses/#mph-token-staking","text":"MPHToken deployed at 0x75A1169E51A3C6336Ef854f76cDE949F999720B1 MPHMinter deployed at 0x2165b3800B17224De39303c240a41064179Db0A6 Rewards2 deployed at 0xbf724db570B9Cf3a8deD903055BcaA863CE07ad7 Dumper2 deployed at 0xEB5b9703502bBb0b3Ce8fdb0F9dCf6f2284508C0 MPH-ETH LP token: 0xfd9aACca3c5F8EF3AAa787E5Cb8AF0c041D8875f ClonedRewardsFactory: 0x4b52448393b8EcF8D56186887976c794056C6C68 LP rewards pool: 0x45DB53CA4D62BDAcA3805A9F648F56cD9dE5127B","title":"MPH token &amp; staking"},{"location":"addresses/#shared","text":"LinearInterestModel deployed at 0x53d8d305D1BB3098A46ac97C84B210004c54F5f8 PercentageFeeModel deployed at 0x87D700b0e5aAAde6079FaEf1F6564405E7C0E612 Timelock: 0x4027d912A19E3Cd540FB580aF6A9088eAC738566 Governance treasury: 0x56f34826Cc63151f74FA8f701E4f73C5EAae52AD Developer wallet: 0xfecBad5D60725EB6fd10f8936e02fa203fd27E4b","title":"Shared"},{"location":"addresses/#ausdc","text":"AaveMarket deployed at 0xAdd30675DF3728b47Ce9E23dB5648845E3aEE94E EMAOracle deployed at 0xf84AE5eE13FaAcd43117bA49Dd4879641E5f2c11 88mph aUSDC Pool Deposit deployed at 0x8d6E0CfBDce3de21cd8B5bFC685981475738B198 88mph aUSDC Pool Funding deployed at 0xcE69Bd6de5aD3501bCF70DBE307dBA9E0B5BD139 88mph aUSDC Pool deployed at 0xb5EE8910A93F8A450E97BE0436F36B9458106682","title":"aUSDC"},{"location":"addresses/#cuni","text":"CompoundERC20Market deployed at 0x4341C33A96A47defA1ACd7b664A65cF07428Dc05 EMAOracle deployed at 0x380d57370654e0479476B492e8688AAd767e7424 88mph cUNI Pool Deposit deployed at 0xF9E38ff84dd89D9f448ED875A2F0B5ba9dE13053 88mph cUNI Pool Funding deployed at 0xfA28c647c1dC0e1399e158e8Fec035Ec4D7a8Cfa 88mph cUNI Pool deployed at 0xF9761c1A244C66E40cF9B7EfB4b0C29b562B6bC0","title":"cUNI"},{"location":"addresses/#cusdc","text":"CompoundERC20Market deployed at 0x816BE73fD1c6b07F7fFd191C833A354cbd3C24a1 EMAOracle deployed at 0x0018f8aa6c919E12BdD0dC13Bf593d336F44F79C 88mph cUSDC Pool Deposit deployed at 0x20fe575F8c91eEd3AeD6B8ddb04416525792785D 88mph cUSDC Pool Funding deployed at 0x344E6ac24B9DceBCA597d2A1E5e2b3d5a1773Eaf 88mph cUSDC Pool deployed at 0xEB2F0A3045db12366A9f6A8e922D725D86a117EB","title":"cUSDC"},{"location":"addresses/#yusd","text":"YVaultMarket deployed at 0x4a245808D621dBe39ac4e2286F2B2cd8EAD30B2a EMAOracle deployed at 0xc172061CcF700A4C13d5217dc4c49aEe5A4cFEda 88mph yCRV Pool Deposit deployed at 0x86DAf7Db5fD66db2767A0da2FF5EAAB16d18E74c 88mph yCRV Pool Funding deployed at 0x58c22cA208E2066Fa55fBe79B6B9a55DB0a4FE85 88mph yCRV Pool deployed at 0x25a5feB5aC6533fE3C4E8E8e2a55f9E1f1F8E5f0","title":"yUSD"},{"location":"addresses/#ycrvsbtc","text":"YVaultMarket deployed at 0xb75F43fc5769d9a29621dd5d8bE3669aA4F94e3C EMAOracle deployed at 0x9Ab9aef149295747EBf4aDC4444a54ad16Bf9F50 88mph crvSBTC Pool Deposit deployed at 0x35D2B5eccd58484ac2feB62c90E0C9B2144feB34 88mph crvSBTC Pool Funding deployed at 0x454AeBCA7d4455a428511c3f7B4008CD3B529f49 88mph crvSBTC Pool deployed at 0xD42F7c7463B261fAc72510C638A877690beA8d68","title":"ycrvSBTC"},{"location":"howitworks/","text":"How 88mph works # Overview # What exactly happens when you, say, deposit 100 DAI into 88mph for 1 year at 10% fixed-rate APY? Your 100 DAI is transferred to 88mph. 88mph deposits the 100 DAI into a yield-generating protocol with variable rate APY, which will generate yield for the 1 year deposit period. Once the 1 year is over, you withdraw 110 DAI from 88mph. At first glance, this may seem extremely problematic. To begin with, how is this different from simply juggling your own money around? Secondly, if the yield-generating protocol failed to generate 10 DAI of yield from the 100 DAI given to it in 1 year, you can't guarantee that you can withdraw 110 DAI from 88mph. These objections are resolved by 88mph through pooling the deposits together. Pooling deposits means putting the deposited DAI into a single pool, from which users can withdraw a deposit once its deposit period is over. How would pooling help? Risk balancing : If the floating rate APY rose after a deposit, the yield generated by the deposited funds could be more than the interest promised to the user. This surplus would be able to balance out the debt caused by deposits where the floating rate has dropped since the time of deposit. This way, risk of insolvency is reduced for the users, and the stability of 88mph's interest rate is supported. Overlapping deposit periods : If an older deposit could not generate enought yield to cover the debt caused by the interest promised to the depositor, and its deposit period would be over soon, the yield could still be paid out using the funds of other deposits. This alone obviously does not solve the debt, but combined with risk balancing and the volatility in the floating interest rate it helps with keeping the 88mph pool solvent. Floating-rate bonds # Simply doing the above, though, would make 88mph a fairly risky product: if the floating rate APY drops to a very low value and stays there for a long time, deposits made when the floating rate was still high would not by themselves generate enough interest to cover the original interest payouts, and neither would the deposits made after the rates dropped help with this situation. This would cause a pool-wide insolvency event. This is why 88mph also offers another mechanic called floating-rate bonds . Buying floating-rate bonds allows someone to immediately fill up the debt of one or more deposits using their own money, and in exchange they would receive the yield generated by those deposits. Given that each 88mph deposit would generate enough yield to cover its own deficit as long as the average interest rate during the deposit period stays above 75% of the initial value, a bond buyer would earn a profit as long as the interest rate doesn't drop by more than 25%. Not only do floating-rate bonds significantly reduces the risk of depositing into 88mph, it also provides a brand new financial product that allows users to long the interest rates of lending protocols . It's similar to some other products that allows people to long and short interest rates ( LSDai ), except 88mph's floating-rate bonds provides a profit even if the interest rate drops (as long as it doesn't drop by more than 25%), and provides even more profits if the interst rate rises. It's like leverage-longing the interest rate! Interoperability through Non-fungible tokens (NFTs) # 88mph represents deposits and bonds using ERC-721 standard non-fungible tokens. This means that users can transfer them between accounts, buy or sell them on exchanges, put wrappers around them to add more features, and more! The limit is your imagination. Some possible use cases: Deposited a lot of money into 88mph, but suddenly need cash? And you still want your deposit to generate profit? Well, you can take out a loan on lending platforms like RocketNFT using your deposit NFT as collateral, and pay it back once you withdraw your deposit. Magic! You can wrap your bond NFT with an ERC20 token to sell it out fractionally. Interest rate model # At the moment, 88mph uses a linear model for determining the fixed interest rate offered to depositors. 88mph keeps track of the Exponential Moving Average (EMA) of the underlying yield protocol's APY over roughly a monthly window, and offers 75% of the EMA as the fixed rate. We have plans to implement more sophisticated interest rate models in the future that take into account paramters such as the pool surplus/debt, floating-rate volatility, pool total deposit, and so on.","title":"How 88mph works"},{"location":"howitworks/#how-88mph-works","text":"","title":"How 88mph works"},{"location":"howitworks/#overview","text":"What exactly happens when you, say, deposit 100 DAI into 88mph for 1 year at 10% fixed-rate APY? Your 100 DAI is transferred to 88mph. 88mph deposits the 100 DAI into a yield-generating protocol with variable rate APY, which will generate yield for the 1 year deposit period. Once the 1 year is over, you withdraw 110 DAI from 88mph. At first glance, this may seem extremely problematic. To begin with, how is this different from simply juggling your own money around? Secondly, if the yield-generating protocol failed to generate 10 DAI of yield from the 100 DAI given to it in 1 year, you can't guarantee that you can withdraw 110 DAI from 88mph. These objections are resolved by 88mph through pooling the deposits together. Pooling deposits means putting the deposited DAI into a single pool, from which users can withdraw a deposit once its deposit period is over. How would pooling help? Risk balancing : If the floating rate APY rose after a deposit, the yield generated by the deposited funds could be more than the interest promised to the user. This surplus would be able to balance out the debt caused by deposits where the floating rate has dropped since the time of deposit. This way, risk of insolvency is reduced for the users, and the stability of 88mph's interest rate is supported. Overlapping deposit periods : If an older deposit could not generate enought yield to cover the debt caused by the interest promised to the depositor, and its deposit period would be over soon, the yield could still be paid out using the funds of other deposits. This alone obviously does not solve the debt, but combined with risk balancing and the volatility in the floating interest rate it helps with keeping the 88mph pool solvent.","title":"Overview"},{"location":"howitworks/#floating-rate-bonds","text":"Simply doing the above, though, would make 88mph a fairly risky product: if the floating rate APY drops to a very low value and stays there for a long time, deposits made when the floating rate was still high would not by themselves generate enough interest to cover the original interest payouts, and neither would the deposits made after the rates dropped help with this situation. This would cause a pool-wide insolvency event. This is why 88mph also offers another mechanic called floating-rate bonds . Buying floating-rate bonds allows someone to immediately fill up the debt of one or more deposits using their own money, and in exchange they would receive the yield generated by those deposits. Given that each 88mph deposit would generate enough yield to cover its own deficit as long as the average interest rate during the deposit period stays above 75% of the initial value, a bond buyer would earn a profit as long as the interest rate doesn't drop by more than 25%. Not only do floating-rate bonds significantly reduces the risk of depositing into 88mph, it also provides a brand new financial product that allows users to long the interest rates of lending protocols . It's similar to some other products that allows people to long and short interest rates ( LSDai ), except 88mph's floating-rate bonds provides a profit even if the interest rate drops (as long as it doesn't drop by more than 25%), and provides even more profits if the interst rate rises. It's like leverage-longing the interest rate!","title":"Floating-rate bonds"},{"location":"howitworks/#interoperability-through-non-fungible-tokens-nfts","text":"88mph represents deposits and bonds using ERC-721 standard non-fungible tokens. This means that users can transfer them between accounts, buy or sell them on exchanges, put wrappers around them to add more features, and more! The limit is your imagination. Some possible use cases: Deposited a lot of money into 88mph, but suddenly need cash? And you still want your deposit to generate profit? Well, you can take out a loan on lending platforms like RocketNFT using your deposit NFT as collateral, and pay it back once you withdraw your deposit. Magic! You can wrap your bond NFT with an ERC20 token to sell it out fractionally.","title":"Interoperability through Non-fungible tokens (NFTs)"},{"location":"howitworks/#interest-rate-model","text":"At the moment, 88mph uses a linear model for determining the fixed interest rate offered to depositors. 88mph keeps track of the Exponential Moving Average (EMA) of the underlying yield protocol's APY over roughly a monthly window, and offers 75% of the EMA as the fixed rate. We have plans to implement more sophisticated interest rate models in the future that take into account paramters such as the pool surplus/debt, floating-rate volatility, pool total deposit, and so on.","title":"Interest rate model"},{"location":"mph/","text":"MPH tokenomics # Initial issuance # 88,000 MPH is minted and will be distributed via liquidity mining. The program begins at 10:30 am PT 11/16/2020 and lasts 14 days. To participate, follow these steps: Deposit into an 88mph pool, or buy a floating-rate bond. This will give you some upfront MPH. Provide liquidity to the MPH-ETH Uniswap pair Stake the Uniswap LP token here Depositor rewards # When a user makes a deposit in an 88mph pool, they will receive newly-minted upfront MPH tokens proportional to the amount of fixed-rate interest earned by the deposit. They can then stake this MPH in the MPH rewards pool to earn their share of protocol fees and yield-farming rewards. When the deposit is mature and the user wants to withdraw it, they will have to pay back a proportion of the upfront MPH tokens (currently 90%). These MPH tokens will be sent to the 88mph governance treasury, where MPH holders can vote on how to spend them. This distribution model ensures that existing users will have an amplified influence in the governance process and income sharing, which aligns the interest of the protocol with the interest of the users, rather than the interest of speculators. Bond buyer rewards # When a user buys a floating-rate bond, they will receive newly-minted upfront MPH tokens proportional to the amount they paid for the bond. They can then stake this MPH in the MPH rewards pool to earn their share of protocol fees and yield-farming rewards. Developer fund # Whenever MPH is minted by new deposits/bond purchases, an additional 10% of the minted amount is minted and sent to the developer fund. These MPH will be used to pay for future development & maintenance of the protocol. Governance treasury # The governance treasury receives the MPH tokens paid back by depositors when they withdraw their deposits. These MPH will be used by whatever the MPH holders decide on.","title":"MPH tokenomics"},{"location":"mph/#mph-tokenomics","text":"","title":"MPH tokenomics"},{"location":"mph/#initial-issuance","text":"88,000 MPH is minted and will be distributed via liquidity mining. The program begins at 10:30 am PT 11/16/2020 and lasts 14 days. To participate, follow these steps: Deposit into an 88mph pool, or buy a floating-rate bond. This will give you some upfront MPH. Provide liquidity to the MPH-ETH Uniswap pair Stake the Uniswap LP token here","title":"Initial issuance"},{"location":"mph/#depositor-rewards","text":"When a user makes a deposit in an 88mph pool, they will receive newly-minted upfront MPH tokens proportional to the amount of fixed-rate interest earned by the deposit. They can then stake this MPH in the MPH rewards pool to earn their share of protocol fees and yield-farming rewards. When the deposit is mature and the user wants to withdraw it, they will have to pay back a proportion of the upfront MPH tokens (currently 90%). These MPH tokens will be sent to the 88mph governance treasury, where MPH holders can vote on how to spend them. This distribution model ensures that existing users will have an amplified influence in the governance process and income sharing, which aligns the interest of the protocol with the interest of the users, rather than the interest of speculators.","title":"Depositor rewards"},{"location":"mph/#bond-buyer-rewards","text":"When a user buys a floating-rate bond, they will receive newly-minted upfront MPH tokens proportional to the amount they paid for the bond. They can then stake this MPH in the MPH rewards pool to earn their share of protocol fees and yield-farming rewards.","title":"Bond buyer rewards"},{"location":"mph/#developer-fund","text":"Whenever MPH is minted by new deposits/bond purchases, an additional 10% of the minted amount is minted and sent to the developer fund. These MPH will be used to pay for future development & maintenance of the protocol.","title":"Developer fund"},{"location":"mph/#governance-treasury","text":"The governance treasury receives the MPH tokens paid back by depositors when they withdraw their deposits. These MPH will be used by whatever the MPH holders decide on.","title":"Governance treasury"},{"location":"smartcontract/","text":"Smart contract reference # The smart contract source code can be found on GitHub . Architecture overview # Each 88mph pool consists of 6 smart contracts: DInterest : The main smart contract that users interact with. Handles depositing, withdrawing, and keeping track of deposits. Emits all of the events used in the subgraph. FeeModel : Determines the fee strategy of 88mph, as well as who receives the fees. MoneyMarket : A wrapper for interacting with yield-generating protocols, and stores all of the user funds. Requires a different one for each protocol. InterestOracle : An oracle for the interest rate of the underlying yield-generating protocol. NFT : Two non-fungible ERC721 tokens, used for representing ownership of deposits and bonds. Globally 88mph has the following contracts for handling things related to the MPH token: MPHToken : The MPH ERC-20 token contract itself. MPHMinter : Responsible for minting & taking back MPH tokens for depositors & bond buyers. Dumper : Responsible for accumulating the protocol fees & yield-farming rewards generated by 88mph pools and exchanging them for DAI. Rewards : The MPH rewards staking contract for distributing the protocol fees & yield-farming rewards. API reference # DInterest # State changing functions # function deposit(uint256 amount, uint256 maturationTimestamp) external # Creates a single deposit for the caller. amount : The amount of stablecoin to deposit. The caller should have already approved the contract to spend this much stablecoin before calling this function. Scaled by 10^{stablecoinDecimals} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. function withdraw(uint256 depositID) external # Withdraws a single deposit for the caller. The caller must own the deposit NFT with ID depositID . depositID : The index of the deposit to be withdrawn in the deposits array plus 1. Important note # Withdrawing may fail if the 88mph pool has failed to generate enough interest from the underlying money market to cover the deficit incurred by the original upfront interest payout, and no one has funded the difference by buying bonds. This is the main risk of depositing into 88mph. function earlyWithdraw(uint256 depositID) external # Withdraws a single deposit for the caller, before the maturation timestamp. The caller must own the deposit NFT with ID depositID . depositID : The index of the deposit to be withdrawn in the deposits array plus 1. function multiDeposit(uint256[] calldata amountList, uint256[] calldata maturationTimestampList) external # Deposits multiple deposits for the caller. The values at each index in each array will be combined to create a single deposit. amountList : An array of the amounts of stablecoin to deposit. The caller should have already approved the contract to spend this much stablecoin before calling this function. Scaled by 10^{stablecoinDecimals} . maturationTimestampList : An array of the Unix timestamps at and after which the deposits will be able to be withdrawn. In seconds. Input size limit # The maximum recommended number of deposits is 20. function multiWithdraw(uint256[] calldata depositIDList) external # Withdraws multiple deposits for the caller. The caller must own the deposit NFTs with IDs in depositIDList . depositIDList : The indices of the deposits to be withdrawn in the deposits array plus 1. Input size limit # The maximum recommended number of deposits is 100. Important note # Withdrawing may fail if the 88mph pool has failed to generate enough interest from the underlying money market to cover the deficit incurred by the original upfront interest payout, and no one has funded the difference. This is the main risk of depositing into 88mph. If withdrawing actually fails, earlyWithdraw() may be called to get back the deposit minus the upfront interest and fee. function multiEarlyWithdraw(uint256[] calldata depositIDList) external # Withdraws multiple deposits for the caller, before the maturation timestamp. The caller must own the deposit NFTs with IDs in depositIDList . depositIDList : The indices of the deposits to be withdrawn in the deposits array plus 1. Input size limit # The maximum recommended number of deposits is 50. function fundAll() external # Allows the caller to fund all of the existing deficit of the 88mph pool. In exchange, the caller receives a funding NFT, and the interest generated by the deposits the caller funded will be sent to the owner of the NFT whenever a deposit they funded is withdrawn. Before calling this function, the caller must approve at least the deficit amount of stablecoin to the DInterest contract. This amount may be obtained using surplus() . To avoid the transaction being reverted, it is recommended to simply set the approval amount to 2^{256}-1 . function fundMultiple(uint256 toDepositID) external # Allows the caller to fund the deficit of multiple deposits. In exchange, the caller receives a funding NFT, and the interest generated by the deposits the caller funded will be sent to the owner of the NFT whenever a deposit they funded is withdrawn. Before calling this function, the caller must approve at least the deficit amount of stablecoin to the DInterest contract. This amount may be obtained using surplusOfDeposit() . To avoid the transaction being reverted, it is recommended to simply set the approval amount to 2^{256}-1 . toDepositID : Deposits with ID from (not including) lastFundedDepositID to (including) toDepositID will be funded. Read only functions # function getDeposit(uint256 depositID) external view returns (uint256 amount, uint256 maturationTimestamp, uint256 initialDeficit, uint256 initialMoneyMarketIncomeIndex, bool active) # Returns info about a user deposit. The owner of the deposit is whichever Ethereum account that owns the ERC721 deposit token with id depositID . Inputs # depositID : The index of the deposit in the deposits array. Returns # amount : The amount of the deposit, in stablecoins. Scaled by 10^{stablecoinDecimals} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. interestOwed : The initial debt caused by the deposit. initialMoneyMarketIncomeIndex : The value returned by moneyMarket.incomeIndex() at the time of deposit. active : true if the deposit hasn't been withdrawn, false otherwise. finalSurplusIsNegative : true if at the time of withdrawal the deposit had a negative surplus, false otherwise. finalSurplusAmount : The amount of surplus/debt of the deposit at the time of withdrawal. mintMPHAmount : The amount of MPH tokens minted to the user at the time of deposit. function getFunding(uint256 fundingID) external view returns (uint256 fromDepositID, uint256 toDepositID, uint256 recordedFundedDepositAmount, uint256 recordedMoneyMarketIncomeIndex) # Returns info about a funding. The owner of the funding (and the account who will receive the interests) is whichever Ethereum account that owns the ERC721 funding token with id fundingID . Inputs # fundingID : The index of the funding in the fundingList array. Returns # fromDepositID : Deposits with ID from (not including) fromDepositID to (including) toDepositID have their deficits funded by this funding instance. toDepositID : Deposits with ID from (not including) fromDepositID to (including) toDepositID have their deficits funded by this funding instance. recordedFundedDepositAmount : The current total deposit amount that is generating interest for the owner of this funding instance, in stablecoins. Scaled by 10^{stablecoinDecimals} . recordedMoneyMarketIncomeIndex : The value returned by moneyMarket.incomeIndex() at the time of the latest withdrawal of a deposit funded by this funding instance. If no funded deposit has been withdrawn yet, this value is equal to the monet market incomeIndex at the time of the funding instance's creation. function MinDepositPeriod() external view returns (uint256) # Returns the minimum deposit period, in seconds. function MaxDepositPeriod() external view returns (uint256) # Returns the maximum deposit period, in seconds. function MinDepositAmount() external view returns (uint256) # Returns the minimum deposit amount for a single deposit in stablecoin . Scaled by 10^{stablecoinDecimals} . function MaxDepositAmount() external view returns (uint256) # Returns the maximum deposit amount for a single deposit in stablecoin . Scaled by 10^{stablecoinDecimals} . function totalDeposit() external view returns (uint256) # Returns the total deposited amount of stablecoin . Scaled by 10^{stablecoinDecimals} . function moneyMarket() external view returns (address) # Returns the address of MoneyMarket . function stablecoin() external view returns (address) # Returns the address of the stablecoin used. function feeModel() external view returns (address) # Returns the address of FeeModel . function interestModel() external view returns (address) # Returns the address of InterestModel . function interestOracle() external view returns (address) # Returns the address of InterestOracle . function depositNFT() external view returns (address) # Returns the address of the ERC721 deposit token. function fundingNFT() external view returns (address) # Returns the address of ERC721 funding token. function calculateInterestAmount(uint256 depositAmount, uint256 depositPeriodInSeconds) external view returns (uint256 interestAmount) # Returns the interest amount given the deposit amount and period. Inputs # depositAmount : The amount of the deposit in stablecoin . Scaled by 10^{stablecoinDecimals} . depositPeriodInSeconds : The length of the deposit's deposit period, in seconds. function surplus() external view returns (bool isNegative, uint256 surplusAmount) # Returns the surplus value of the pool over the owed deposits. Returns # isNegative : Whether the surplus is negative. A negative surplus means there's a deficit. surplusAmount : Amount of the pool's surplus, in stablecoins. Scaled by 10^{stablecoinDecimals} . function surplusOfDeposit(uint256 depositID) external view returns (bool isNegative, uint256 surplusAmount) # Returns the surplus value of a particular deposit. Does not include funding. Inputs # depositID : The index of the deposit to be withdrawn in the deposits array plus 1. Returns # isNegative : Whether the surplus is negative. A negative surplus means there's a deficit. surplusAmount : Amount of the pool's surplus, in stablecoins. Scaled by 10^{stablecoinDecimals} . function depositsLength() external view returns (uint256) # Returns the length of the deposits array. function fundingListLength() external view returns (address) # Returns the length of the fundingList array. function depositIsFunded(uint256 depositID) external view returns (bool) # Inputs # depositID : The index of the deposit to be withdrawn in the deposits array plus 1. Returns # Returns whether or not the deposit's deficit has been funded. function latestFundedDepositID() external view returns (uint256) # Returns the maximum ID among funded deposits. It can be assumed that all deposits with ID less than or equal to this value have been funded. function unfundedUserDepositAmount() external view returns (uint256) # Returns the deposited stablecoin amount whose deficit hasn't been funded. Scaled by 10^{stablecoinDecimals} . FeeModel # Read only functions # function getFee(uint256 _txAmount) external pure returns (uint256 _feeAmount) # Used for determining how much fee to charge from a transaction. Inputs # _txAmount : The amount of the transaction from which a fee will be taken. Returns # _feeAmount : The amount of the fee that will be taken from the transaction. function beneficiary() external view returns (address) # Returns the address who will receive the fees. MoneyMarket # State changing functions # function deposit(uint256 amount) external # Lends amount stablecoins to the underlying money market protocol. Inputs # amount : The amount of stablecoins to be deposited. function withdraw(uint256 amountInUnderlying) external # Withdraws amountInUnderlying stablecoins from the underlying money market protocol. Inputs # amountInUnderlying : The amount of stablecoins to be withdrawn. Read only functions # function totalValue() external returns (uint256) # Returns the total value locked in the money market, in terms of the underlying stablecoin. Scaled by 10^{stablecoinDecimals} . function incomeIndex() external returns (uint256) # Returns an index that can be used to compute the interest generated by the money market over a period of time. Specifically, interestOverPeriod = depositValueAtBeginningOfPeriod \\times \\frac{incomeIndexAtEndOfPeriod}{incomeIndexAtBeginningOfPeriod} .","title":"Smart contract reference"},{"location":"smartcontract/#smart-contract-reference","text":"The smart contract source code can be found on GitHub .","title":"Smart contract reference"},{"location":"smartcontract/#architecture-overview","text":"Each 88mph pool consists of 6 smart contracts: DInterest : The main smart contract that users interact with. Handles depositing, withdrawing, and keeping track of deposits. Emits all of the events used in the subgraph. FeeModel : Determines the fee strategy of 88mph, as well as who receives the fees. MoneyMarket : A wrapper for interacting with yield-generating protocols, and stores all of the user funds. Requires a different one for each protocol. InterestOracle : An oracle for the interest rate of the underlying yield-generating protocol. NFT : Two non-fungible ERC721 tokens, used for representing ownership of deposits and bonds. Globally 88mph has the following contracts for handling things related to the MPH token: MPHToken : The MPH ERC-20 token contract itself. MPHMinter : Responsible for minting & taking back MPH tokens for depositors & bond buyers. Dumper : Responsible for accumulating the protocol fees & yield-farming rewards generated by 88mph pools and exchanging them for DAI. Rewards : The MPH rewards staking contract for distributing the protocol fees & yield-farming rewards.","title":"Architecture overview"},{"location":"smartcontract/#api-reference","text":"","title":"API reference"},{"location":"smartcontract/#dinterest","text":"","title":"DInterest"},{"location":"smartcontract/#state-changing-functions","text":"","title":"State changing functions"},{"location":"smartcontract/#function-deposituint256-amount-uint256-maturationtimestamp-external","text":"Creates a single deposit for the caller. amount : The amount of stablecoin to deposit. The caller should have already approved the contract to spend this much stablecoin before calling this function. Scaled by 10^{stablecoinDecimals} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds.","title":"function deposit(uint256 amount, uint256 maturationTimestamp) external"},{"location":"smartcontract/#function-withdrawuint256-depositid-external","text":"Withdraws a single deposit for the caller. The caller must own the deposit NFT with ID depositID . depositID : The index of the deposit to be withdrawn in the deposits array plus 1.","title":"function withdraw(uint256 depositID) external"},{"location":"smartcontract/#important-note","text":"Withdrawing may fail if the 88mph pool has failed to generate enough interest from the underlying money market to cover the deficit incurred by the original upfront interest payout, and no one has funded the difference by buying bonds. This is the main risk of depositing into 88mph.","title":"Important note"},{"location":"smartcontract/#function-earlywithdrawuint256-depositid-external","text":"Withdraws a single deposit for the caller, before the maturation timestamp. The caller must own the deposit NFT with ID depositID . depositID : The index of the deposit to be withdrawn in the deposits array plus 1.","title":"function earlyWithdraw(uint256 depositID) external"},{"location":"smartcontract/#function-multideposituint256-calldata-amountlist-uint256-calldata-maturationtimestamplist-external","text":"Deposits multiple deposits for the caller. The values at each index in each array will be combined to create a single deposit. amountList : An array of the amounts of stablecoin to deposit. The caller should have already approved the contract to spend this much stablecoin before calling this function. Scaled by 10^{stablecoinDecimals} . maturationTimestampList : An array of the Unix timestamps at and after which the deposits will be able to be withdrawn. In seconds.","title":"function multiDeposit(uint256[] calldata amountList, uint256[] calldata maturationTimestampList) external"},{"location":"smartcontract/#input-size-limit","text":"The maximum recommended number of deposits is 20.","title":"Input size limit"},{"location":"smartcontract/#function-multiwithdrawuint256-calldata-depositidlist-external","text":"Withdraws multiple deposits for the caller. The caller must own the deposit NFTs with IDs in depositIDList . depositIDList : The indices of the deposits to be withdrawn in the deposits array plus 1.","title":"function multiWithdraw(uint256[] calldata depositIDList) external"},{"location":"smartcontract/#input-size-limit_1","text":"The maximum recommended number of deposits is 100.","title":"Input size limit"},{"location":"smartcontract/#important-note_1","text":"Withdrawing may fail if the 88mph pool has failed to generate enough interest from the underlying money market to cover the deficit incurred by the original upfront interest payout, and no one has funded the difference. This is the main risk of depositing into 88mph. If withdrawing actually fails, earlyWithdraw() may be called to get back the deposit minus the upfront interest and fee.","title":"Important note"},{"location":"smartcontract/#function-multiearlywithdrawuint256-calldata-depositidlist-external","text":"Withdraws multiple deposits for the caller, before the maturation timestamp. The caller must own the deposit NFTs with IDs in depositIDList . depositIDList : The indices of the deposits to be withdrawn in the deposits array plus 1.","title":"function multiEarlyWithdraw(uint256[] calldata depositIDList) external"},{"location":"smartcontract/#input-size-limit_2","text":"The maximum recommended number of deposits is 50.","title":"Input size limit"},{"location":"smartcontract/#function-fundall-external","text":"Allows the caller to fund all of the existing deficit of the 88mph pool. In exchange, the caller receives a funding NFT, and the interest generated by the deposits the caller funded will be sent to the owner of the NFT whenever a deposit they funded is withdrawn. Before calling this function, the caller must approve at least the deficit amount of stablecoin to the DInterest contract. This amount may be obtained using surplus() . To avoid the transaction being reverted, it is recommended to simply set the approval amount to 2^{256}-1 .","title":"function fundAll() external"},{"location":"smartcontract/#function-fundmultipleuint256-todepositid-external","text":"Allows the caller to fund the deficit of multiple deposits. In exchange, the caller receives a funding NFT, and the interest generated by the deposits the caller funded will be sent to the owner of the NFT whenever a deposit they funded is withdrawn. Before calling this function, the caller must approve at least the deficit amount of stablecoin to the DInterest contract. This amount may be obtained using surplusOfDeposit() . To avoid the transaction being reverted, it is recommended to simply set the approval amount to 2^{256}-1 . toDepositID : Deposits with ID from (not including) lastFundedDepositID to (including) toDepositID will be funded.","title":"function fundMultiple(uint256 toDepositID) external"},{"location":"smartcontract/#read-only-functions","text":"","title":"Read only functions"},{"location":"smartcontract/#function-getdeposituint256-depositid-external-view-returns-uint256-amount-uint256-maturationtimestamp-uint256-initialdeficit-uint256-initialmoneymarketincomeindex-bool-active","text":"Returns info about a user deposit. The owner of the deposit is whichever Ethereum account that owns the ERC721 deposit token with id depositID .","title":"function getDeposit(uint256 depositID) external view returns (uint256 amount, uint256 maturationTimestamp, uint256 initialDeficit, uint256 initialMoneyMarketIncomeIndex, bool active)"},{"location":"smartcontract/#inputs","text":"depositID : The index of the deposit in the deposits array.","title":"Inputs"},{"location":"smartcontract/#returns","text":"amount : The amount of the deposit, in stablecoins. Scaled by 10^{stablecoinDecimals} . maturationTimestamp : The Unix timestamp at and after which the deposit will be able to be withdrawn. In seconds. interestOwed : The initial debt caused by the deposit. initialMoneyMarketIncomeIndex : The value returned by moneyMarket.incomeIndex() at the time of deposit. active : true if the deposit hasn't been withdrawn, false otherwise. finalSurplusIsNegative : true if at the time of withdrawal the deposit had a negative surplus, false otherwise. finalSurplusAmount : The amount of surplus/debt of the deposit at the time of withdrawal. mintMPHAmount : The amount of MPH tokens minted to the user at the time of deposit.","title":"Returns"},{"location":"smartcontract/#function-getfundinguint256-fundingid-external-view-returns-uint256-fromdepositid-uint256-todepositid-uint256-recordedfundeddepositamount-uint256-recordedmoneymarketincomeindex","text":"Returns info about a funding. The owner of the funding (and the account who will receive the interests) is whichever Ethereum account that owns the ERC721 funding token with id fundingID .","title":"function getFunding(uint256 fundingID) external view returns (uint256 fromDepositID, uint256 toDepositID, uint256 recordedFundedDepositAmount, uint256 recordedMoneyMarketIncomeIndex)"},{"location":"smartcontract/#inputs_1","text":"fundingID : The index of the funding in the fundingList array.","title":"Inputs"},{"location":"smartcontract/#returns_1","text":"fromDepositID : Deposits with ID from (not including) fromDepositID to (including) toDepositID have their deficits funded by this funding instance. toDepositID : Deposits with ID from (not including) fromDepositID to (including) toDepositID have their deficits funded by this funding instance. recordedFundedDepositAmount : The current total deposit amount that is generating interest for the owner of this funding instance, in stablecoins. Scaled by 10^{stablecoinDecimals} . recordedMoneyMarketIncomeIndex : The value returned by moneyMarket.incomeIndex() at the time of the latest withdrawal of a deposit funded by this funding instance. If no funded deposit has been withdrawn yet, this value is equal to the monet market incomeIndex at the time of the funding instance's creation.","title":"Returns"},{"location":"smartcontract/#function-mindepositperiod-external-view-returns-uint256","text":"Returns the minimum deposit period, in seconds.","title":"function MinDepositPeriod() external view returns (uint256)"},{"location":"smartcontract/#function-maxdepositperiod-external-view-returns-uint256","text":"Returns the maximum deposit period, in seconds.","title":"function MaxDepositPeriod() external view returns (uint256)"},{"location":"smartcontract/#function-mindepositamount-external-view-returns-uint256","text":"Returns the minimum deposit amount for a single deposit in stablecoin . Scaled by 10^{stablecoinDecimals} .","title":"function MinDepositAmount() external view returns (uint256)"},{"location":"smartcontract/#function-maxdepositamount-external-view-returns-uint256","text":"Returns the maximum deposit amount for a single deposit in stablecoin . Scaled by 10^{stablecoinDecimals} .","title":"function MaxDepositAmount() external view returns (uint256)"},{"location":"smartcontract/#function-totaldeposit-external-view-returns-uint256","text":"Returns the total deposited amount of stablecoin . Scaled by 10^{stablecoinDecimals} .","title":"function totalDeposit() external view returns (uint256)"},{"location":"smartcontract/#function-moneymarket-external-view-returns-address","text":"Returns the address of MoneyMarket .","title":"function moneyMarket() external view returns (address)"},{"location":"smartcontract/#function-stablecoin-external-view-returns-address","text":"Returns the address of the stablecoin used.","title":"function stablecoin() external view returns (address)"},{"location":"smartcontract/#function-feemodel-external-view-returns-address","text":"Returns the address of FeeModel .","title":"function feeModel() external view returns (address)"},{"location":"smartcontract/#function-interestmodel-external-view-returns-address","text":"Returns the address of InterestModel .","title":"function interestModel() external view returns (address)"},{"location":"smartcontract/#function-interestoracle-external-view-returns-address","text":"Returns the address of InterestOracle .","title":"function interestOracle() external view returns (address)"},{"location":"smartcontract/#function-depositnft-external-view-returns-address","text":"Returns the address of the ERC721 deposit token.","title":"function depositNFT() external view returns (address)"},{"location":"smartcontract/#function-fundingnft-external-view-returns-address","text":"Returns the address of ERC721 funding token.","title":"function fundingNFT() external view returns (address)"},{"location":"smartcontract/#function-calculateinterestamountuint256-depositamount-uint256-depositperiodinseconds-external-view-returns-uint256-interestamount","text":"Returns the interest amount given the deposit amount and period.","title":"function calculateInterestAmount(uint256 depositAmount, uint256 depositPeriodInSeconds) external view returns (uint256 interestAmount)"},{"location":"smartcontract/#inputs_2","text":"depositAmount : The amount of the deposit in stablecoin . Scaled by 10^{stablecoinDecimals} . depositPeriodInSeconds : The length of the deposit's deposit period, in seconds.","title":"Inputs"},{"location":"smartcontract/#function-surplus-external-view-returns-bool-isnegative-uint256-surplusamount","text":"Returns the surplus value of the pool over the owed deposits.","title":"function surplus() external view returns (bool isNegative, uint256 surplusAmount)"},{"location":"smartcontract/#returns_2","text":"isNegative : Whether the surplus is negative. A negative surplus means there's a deficit. surplusAmount : Amount of the pool's surplus, in stablecoins. Scaled by 10^{stablecoinDecimals} .","title":"Returns"},{"location":"smartcontract/#function-surplusofdeposituint256-depositid-external-view-returns-bool-isnegative-uint256-surplusamount","text":"Returns the surplus value of a particular deposit. Does not include funding.","title":"function surplusOfDeposit(uint256 depositID) external view returns (bool isNegative, uint256 surplusAmount)"},{"location":"smartcontract/#inputs_3","text":"depositID : The index of the deposit to be withdrawn in the deposits array plus 1.","title":"Inputs"},{"location":"smartcontract/#returns_3","text":"isNegative : Whether the surplus is negative. A negative surplus means there's a deficit. surplusAmount : Amount of the pool's surplus, in stablecoins. Scaled by 10^{stablecoinDecimals} .","title":"Returns"},{"location":"smartcontract/#function-depositslength-external-view-returns-uint256","text":"Returns the length of the deposits array.","title":"function depositsLength() external view returns (uint256)"},{"location":"smartcontract/#function-fundinglistlength-external-view-returns-address","text":"Returns the length of the fundingList array.","title":"function fundingListLength() external view returns (address)"},{"location":"smartcontract/#function-depositisfundeduint256-depositid-external-view-returns-bool","text":"","title":"function depositIsFunded(uint256 depositID) external view returns (bool)"},{"location":"smartcontract/#inputs_4","text":"depositID : The index of the deposit to be withdrawn in the deposits array plus 1.","title":"Inputs"},{"location":"smartcontract/#returns_4","text":"Returns whether or not the deposit's deficit has been funded.","title":"Returns"},{"location":"smartcontract/#function-latestfundeddepositid-external-view-returns-uint256","text":"Returns the maximum ID among funded deposits. It can be assumed that all deposits with ID less than or equal to this value have been funded.","title":"function latestFundedDepositID() external view returns (uint256)"},{"location":"smartcontract/#function-unfundeduserdepositamount-external-view-returns-uint256","text":"Returns the deposited stablecoin amount whose deficit hasn't been funded. Scaled by 10^{stablecoinDecimals} .","title":"function unfundedUserDepositAmount() external view returns (uint256)"},{"location":"smartcontract/#feemodel","text":"","title":"FeeModel"},{"location":"smartcontract/#read-only-functions_1","text":"","title":"Read only functions"},{"location":"smartcontract/#function-getfeeuint256-_txamount-external-pure-returns-uint256-_feeamount","text":"Used for determining how much fee to charge from a transaction.","title":"function getFee(uint256 _txAmount) external pure returns (uint256 _feeAmount)"},{"location":"smartcontract/#inputs_5","text":"_txAmount : The amount of the transaction from which a fee will be taken.","title":"Inputs"},{"location":"smartcontract/#returns_5","text":"_feeAmount : The amount of the fee that will be taken from the transaction.","title":"Returns"},{"location":"smartcontract/#function-beneficiary-external-view-returns-address","text":"Returns the address who will receive the fees.","title":"function beneficiary() external view returns (address)"},{"location":"smartcontract/#moneymarket","text":"","title":"MoneyMarket"},{"location":"smartcontract/#state-changing-functions_1","text":"","title":"State changing functions"},{"location":"smartcontract/#function-deposituint256-amount-external","text":"Lends amount stablecoins to the underlying money market protocol.","title":"function deposit(uint256 amount) external"},{"location":"smartcontract/#inputs_6","text":"amount : The amount of stablecoins to be deposited.","title":"Inputs"},{"location":"smartcontract/#function-withdrawuint256-amountinunderlying-external","text":"Withdraws amountInUnderlying stablecoins from the underlying money market protocol.","title":"function withdraw(uint256 amountInUnderlying) external"},{"location":"smartcontract/#inputs_7","text":"amountInUnderlying : The amount of stablecoins to be withdrawn.","title":"Inputs"},{"location":"smartcontract/#read-only-functions_2","text":"","title":"Read only functions"},{"location":"smartcontract/#function-totalvalue-external-returns-uint256","text":"Returns the total value locked in the money market, in terms of the underlying stablecoin. Scaled by 10^{stablecoinDecimals} .","title":"function totalValue() external returns (uint256)"},{"location":"smartcontract/#function-incomeindex-external-returns-uint256","text":"Returns an index that can be used to compute the interest generated by the money market over a period of time. Specifically, interestOverPeriod = depositValueAtBeginningOfPeriod \\times \\frac{incomeIndexAtEndOfPeriod}{incomeIndexAtBeginningOfPeriod} .","title":"function incomeIndex() external returns (uint256)"}]}